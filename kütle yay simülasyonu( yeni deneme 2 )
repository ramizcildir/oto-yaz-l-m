import pygame
import numpy as np

# Pygame başlat
pygame.init()

# Ekran boyutu
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Yay-Kütle Simülasyonu")

# Renkler
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)

# Fiziksel değişkenler
mass = 100.0      # kg
k = 20.0        # N/m (Yay sabiti)
damping = 0.1   # Sürtünme katsayısı
g = 9.81        # Yer çekimi ivmesi

# Başlangıç koşulları
y_eq = HEIGHT // 2   # Denge konumu
y = y_eq + 100       # Başlangıç konumu
v = 0.0              # Başlangıç hızı
dt = 0.02            # Zaman adımı

# Grafik çizimi için veri
energy_data = []

# Font
font = pygame.font.SysFont(None, 30)

# Simülasyon döngüsü
running = True
while running:
    screen.fill(WHITE)

    # Kullanıcı girişleri
    keys = pygame.key.get_pressed()
    if keys[pygame.K_UP]: mass += 0.1
    if keys[pygame.K_DOWN] and mass > 0.2: mass -= 0.1
    if keys[pygame.K_RIGHT]: k += 1
    if keys[pygame.K_LEFT] and k > 1: k -= 1

    # Fizik hesaplamaları (Harmonik hareket)
    F_spring = -k * (y - y_eq)  # Yay kuvveti
    F_damping = -damping * v    # Sürtünme kuvveti
    a = (F_spring + F_damping) / mass  # Newton'un 2. yasası

    v += a * dt
    y += v * dt

    # Enerji hesaplamaları
    kinetic_energy = 0.5 * mass * v**2
    potential_energy = 0.5 * k * (y - y_eq) ** 2
    total_energy = kinetic_energy + potential_energy

    # Enerji verilerini kaydet (Grafik için)
    energy_data.append((kinetic_energy, potential_energy))

    # Yay ve kütleyi çiz
    pygame.draw.line(screen, BLACK, (WIDTH//2, 50), (WIDTH//2, y), 5)
    pygame.draw.circle(screen, RED, (WIDTH//2, int(y)), 30)

    # Enerji çubuk grafiği
    pygame.draw.rect(screen, BLUE, (50, HEIGHT-100, 50, -kinetic_energy * 3))
    pygame.draw.rect(screen, GREEN, (150, HEIGHT-100, 50, -potential_energy * 3))

    # Bilgi metinleri
    screen.blit(font.render(f"m: {mass:.1f} kg", True, BLACK), (50, 20))
    screen.blit(font.render(f"k: {k:.1f} N/m", True, BLACK), (50, 50))
    screen.blit(font.render(f"Kinetik Enerji: {kinetic_energy:.2f} J", True, BLUE), (50, HEIGHT-130))
    screen.blit(font.render(f"Potansiyel Enerji: {potential_energy:.2f} J", True, GREEN), (50, HEIGHT-160))

    # Çıkış kontrolü
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    pygame.display.update()
    pygame.time.delay(20)

pygame.quit()
